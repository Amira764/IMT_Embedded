#include "STD_Types.h"
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "GIE_int.h"
#include "EXTI_int.h"

//must include
#include "FreeRTOS.h"
#include "task.h"

xTaskHandle xHandle_1;
xTaskHandle xHandle_2;
xTaskHandle xHandle_3;

void LED1(void *ptr);
void LED2(void *ptr);
void LED3(void *ptr);



void pause(void);



void main(void)
{


	// Button init
	DIO_SetPinDirection(3,PIN_2,Input);
	DIO_SetPinValue(3,PIN_2,HIGH);
	// Interrupt
	EXTI_SetTriggerMode();
	EXTI0_CallBackFunc(pause);
	EXTI_Enable(EXTI0);
	GIE_Enable();
	// LEDs Pins
	DIO_SetPinDirection(0,PIN_0,Output);
	DIO_SetPinDirection(0,PIN_1,Output);
	DIO_SetPinDirection(0,PIN_2,Output);
	DIO_SetPinDirection(0,PIN_3,Output);

	xTaskCreate(LED1,NULL,configMINIMAL_STACK_SIZE,NULL,0,&xHandle_1);
	xTaskCreate(LED2,NULL,configMINIMAL_STACK_SIZE,NULL,1,&xHandle_2);
	xTaskCreate(LED3,NULL,configMINIMAL_STACK_SIZE,NULL,2,&xHandle_3);



	vTaskStartScheduler();

	while(1)
	{




	}
}



void LED1(void *ptr)
{
	static u8 i = 0;
	while(1)
	{
		if(!i)
		{
			DIO_SetPinValue(0,PIN_0,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_0,LOW);
			i=0;
		}
		vTaskDelay(1000);
	}
}

void LED2(void *ptr)
{
	static u8 i = 0;
	while(1)
	{
		if(!i)
		{
			DIO_SetPinValue(0,PIN_1,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_1,LOW);
			i=0;
		}
		vTaskDelay(2000);
	}
}

void LED3(void *ptr)
{
	static u8 i = 0;
	while(1)
	{
		if(!i)
		{
			DIO_SetPinValue(0,PIN_2,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_2,LOW);
			i=0;
		}
		vTaskDelay(5000);
	}
}

void pause(void)
{

	static u8 i = 0;

	if(!i)
	{
		vTaskSuspend(xHandle_1);
		vTaskSuspend(xHandle_2);
		vTaskSuspend(xHandle_3);
		i=1;
	}
	else
	{
		vTaskResume(xHandle_1);
		vTaskResume(xHandle_2);
		vTaskResume(xHandle_3);
		i=0;
	}

}

////////////////////////////////////  AMIRA  //////////////////////////////////
//#include "STD_Types.h"
//#include "BIT_MATH.h"
//#include "DIO_int.h"
//#include "FreeRTOS.h"
//#include "task.h"
//#include "GIE_int.h"
//#include "EXTI_int.h"
//#include "util/delay.h"
//
//// Task handles for LED tasks
//xTaskHandle led1Handle = NULL;
//xTaskHandle led2Handle = NULL;
//xTaskHandle led3Handle = NULL;
//
//void led1(void *ptr)
//{
//	static u8 i=0;
//	while(1)
//	{
//		if(i==0)
//		{
//			DIO_SetPinValue(0,PIN_0,HIGH);
//			i=1;
//		}
//		else
//		{
//			DIO_SetPinValue(0,PIN_0,LOW);
//			i=0;
//		}
//		vTaskDelay(1000);
//	}
//}
//
//void led2(void *ptr)
//{
//	static u8 i=0;
//	while(1)
//	{
//		if(i==0)
//		{
//			DIO_SetPinValue(0,PIN_1,HIGH);
//			i=1;
//		}
//		else
//		{
//			DIO_SetPinValue(0,PIN_1,LOW);
//			i=0;
//		}
//		vTaskDelay(3000);
//	}
//}
//
//void led3(void *ptr)
//{
//	static u8 i=0;
//	while(1)
//	{
//		if(i==0)
//		{
//			DIO_SetPinValue(0,PIN_2,HIGH);
//			i=1;
//		}
//		else
//		{
//			DIO_SetPinValue(0,PIN_2,LOW);
//			i=0;
//		}
//		vTaskDelay(5000);
//	}
//}
//
//void func(void);
//
//void main(void)
//{
//	DIO_SetPortDirection(0,PortOut); //PORTA
//
//	xTaskCreate(led1,NULL,configMINIMAL_STACK_SIZE,NULL,0,&led1Handle);
//	xTaskCreate(led2,NULL,configMINIMAL_STACK_SIZE,NULL,1,&led2Handle);
//	xTaskCreate(led3,NULL,configMINIMAL_STACK_SIZE,NULL,2,&led3Handle);
//
//	vTaskStartScheduler();
//
//	DIO_SetPinDirection(3,PIN_2,Input);
//	DIO_SetPinValue(3,PIN_2,HIGH);
//
//	EXTI_SetTriggerMode();
//	EXTI0_CallBackFunc(func);
//	EXTI_Enable(EXTI0);
//	GIE_Enable();
//
//	u8 button = 0;
//	while(1)
//	{
//	}
//}
//
//void func(void)
//{
//	static u8 flag = 0;
//	if (flag ==0)
//	{
//		vTaskSuspend(led1Handle);
//		vTaskSuspend(led2Handle);
//		vTaskSuspend(led3Handle);
//		flag=1;
//	}
//	else
//	{
//		vTaskResume(led1Handle);
//		vTaskResume(led2Handle);
//		vTaskResume(led3Handle);
//		flag=0;
//	}
//}
////	u8 led1val = DIO_GetPinValue(0,0);
////	u8 led2val = DIO_GetPinValue(0,1);
////	u8 led3val = DIO_GetPinValue(0,2);
////
////	static u8 buttonVal=0;
////	while(1)
////	{
////		DIO_SetPortValue(0,0b00000000);
//////		DIO_SetPinValue(0,0,led1val);
//////		DIO_SetPinValue(0,1,led2val);
//////		DIO_SetPinValue(0,2,led3val);
////		buttonVal = DIO_GetPinValue(PORTD,PIN_2);
////		if(buttonVal==1)//released
////		{
////			break;
////		}
////	}
