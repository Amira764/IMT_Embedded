#include "STD_Types.h"
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "FreeRTOS.h"
#include "task.h"
#include "GIE_int.h"
#include "EXTI_int.h"

// Task handles for LED tasks
xTaskHandle led1Handle=NULL;
xTaskHandle led2Handle=NULL;
xTaskHandle led3Handle=NULL;

void led1(void *ptr)
{
	static u8 i=0;
	while(1)
	{
		if(i==0)
		{
			DIO_SetPinValue(0,PIN_0,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_0,LOW);
			i=0;
		}
		vTaskDelay(1000);
	}
}

void led2(void *ptr)
{
	static u8 i=0;
	while(1)
	{
		if(i==0)
		{
			DIO_SetPinValue(0,PIN_1,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_1,LOW);
			i=0;
		}
		vTaskDelay(3000);
	}
}

void led3(void *ptr)
{
	static u8 i=0;
	while(1)
	{
		if(i==0)
		{
			DIO_SetPinValue(0,PIN_2,HIGH);
			i=1;
		}
		else
		{
			DIO_SetPinValue(0,PIN_2,LOW);
			i=0;
		}
		vTaskDelay(5000);
	}
}

void func(void);

void main(void)
{
	DIO_SetPinDirection(3,PIN_2,Input);
	DIO_SetPinValue(3,PIN_2,HIGH);

	EXTI_SetTriggerMode();
	EXTI0_CallBackFunc(func);
	EXTI_Enable(EXTI0);
	GIE_Enable();

	xTaskCreate(led1,NULL,configMINIMAL_STACK_SIZE,NULL,0,&led1Handle);
		xTaskCreate(led2,NULL,configMINIMAL_STACK_SIZE,NULL,1,&led2Handle);
		xTaskCreate(led3,NULL,configMINIMAL_STACK_SIZE,NULL,2,&led3Handle);

		vTaskStartScheduler();

	while(1)
	{

	}
}

void func(void)
{
	static u8 flag = 0;
	if (flag ==0)
	{
		vTaskSuspend(led1Handle);
		vTaskSuspend(led2Handle);
		vTaskSuspend(led3Handle);
		flag=1;
	}
	else
	{
		vTaskResume(led1Handle);
		vTaskResume(led2Handle);
		vTaskResume(led3Handle);
		flag=0;
	}
}
