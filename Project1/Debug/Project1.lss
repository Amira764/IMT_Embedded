
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002936  000029ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800082  00800082  000029ec  2**0
                  ALLOC
  3 .stab         00002a18  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f1  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006635  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000083ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a088  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a475  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_1>
       8:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_2>
       c:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <main>
      8a:	0c 94 99 14 	jmp	0x2932	; 0x2932 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
#include "ADC_int.h"
#include "ADC_prv.h"


void ADC_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//mode
	SET_BIT(ADMUX_Register,REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_Register,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	//right or left
	CLR_BIT(ADMUX_Register,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	//clk -> prescaler = 128
	SET_BIT(ADCSRA_Register,ADPS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Register,ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Register,ADPS0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24

	//enable
	SET_BIT(ADCSRA_Register,ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_Read>:


u16 ADC_Read(u8 Copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	//select channel
	ADMUX_Register=((ADMUX_Register&Bit_Musk)|Copy_u8Channel);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	98 2f       	mov	r25, r24
     bce:	90 7e       	andi	r25, 0xE0	; 224
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24

	//start conversion
	SET_BIT(ADCSRA_Register,ADSC);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24

	//wait on flag
	while(GET_BIT(ADCSRA_Register,ADIF)==0);
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	82 95       	swap	r24
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a9 f3       	breq	.-22     	; 0xbe4 <ADC_Read+0x2e>

	//clear flag
	SET_BIT(ADCSRA_Register,ADIF);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 61       	ori	r24, 0x10	; 16
     c06:	8c 93       	st	X, r24

	//return digital value
	return ADC_Register;
     c08:	e4 e2       	ldi	r30, 0x24	; 36
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
}
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <Mapping>:

u32 Mapping(u32 Range1_max,u32 Range1_min,u32 Range2_max,u32 Range2_min,u32 Range1_reading)
{
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	60 97       	sbiw	r28, 0x10	; 16
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	69 83       	std	Y+1, r22	; 0x01
     c3e:	7a 83       	std	Y+2, r23	; 0x02
     c40:	8b 83       	std	Y+3, r24	; 0x03
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	2d 83       	std	Y+5, r18	; 0x05
     c46:	3e 83       	std	Y+6, r19	; 0x06
     c48:	4f 83       	std	Y+7, r20	; 0x07
     c4a:	58 87       	std	Y+8, r21	; 0x08
     c4c:	e9 86       	std	Y+9, r14	; 0x09
     c4e:	fa 86       	std	Y+10, r15	; 0x0a
     c50:	0b 87       	std	Y+11, r16	; 0x0b
     c52:	1c 87       	std	Y+12, r17	; 0x0c
     c54:	ad 86       	std	Y+13, r10	; 0x0d
     c56:	be 86       	std	Y+14, r11	; 0x0e
     c58:	cf 86       	std	Y+15, r12	; 0x0f
     c5a:	d8 8a       	std	Y+16, r13	; 0x10

	return (Range2_max-((Range2_max-Range2_min)*(Range1_max-Range1_reading)/(Range1_max-Range1_min)));
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	4b 85       	ldd	r20, Y+11	; 0x0b
     c62:	5c 85       	ldd	r21, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	af 85       	ldd	r26, Y+15	; 0x0f
     c6a:	b8 89       	ldd	r27, Y+16	; 0x10
     c6c:	79 01       	movw	r14, r18
     c6e:	8a 01       	movw	r16, r20
     c70:	e8 1a       	sub	r14, r24
     c72:	f9 0a       	sbc	r15, r25
     c74:	0a 0b       	sbc	r16, r26
     c76:	1b 0b       	sbc	r17, r27
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	3a 81       	ldd	r19, Y+2	; 0x02
     c7c:	4b 81       	ldd	r20, Y+3	; 0x03
     c7e:	5c 81       	ldd	r21, Y+4	; 0x04
     c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c84:	af 8d       	ldd	r26, Y+31	; 0x1f
     c86:	b8 a1       	ldd	r27, Y+32	; 0x20
     c88:	28 1b       	sub	r18, r24
     c8a:	39 0b       	sbc	r19, r25
     c8c:	4a 0b       	sbc	r20, r26
     c8e:	5b 0b       	sbc	r21, r27
     c90:	c8 01       	movw	r24, r16
     c92:	b7 01       	movw	r22, r14
     c94:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsi3>
     c98:	7b 01       	movw	r14, r22
     c9a:	8c 01       	movw	r16, r24
     c9c:	29 81       	ldd	r18, Y+1	; 0x01
     c9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ca0:	4b 81       	ldd	r20, Y+3	; 0x03
     ca2:	5c 81       	ldd	r21, Y+4	; 0x04
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	af 81       	ldd	r26, Y+7	; 0x07
     caa:	b8 85       	ldd	r27, Y+8	; 0x08
     cac:	28 1b       	sub	r18, r24
     cae:	39 0b       	sbc	r19, r25
     cb0:	4a 0b       	sbc	r20, r26
     cb2:	5b 0b       	sbc	r21, r27
     cb4:	c8 01       	movw	r24, r16
     cb6:	b7 01       	movw	r22, r14
     cb8:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodsi4>
     cbc:	da 01       	movw	r26, r20
     cbe:	c9 01       	movw	r24, r18
     cc0:	9c 01       	movw	r18, r24
     cc2:	ad 01       	movw	r20, r26
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	ab 85       	ldd	r26, Y+11	; 0x0b
     cca:	bc 85       	ldd	r27, Y+12	; 0x0c
     ccc:	82 1b       	sub	r24, r18
     cce:	93 0b       	sbc	r25, r19
     cd0:	a4 0b       	sbc	r26, r20
     cd2:	b5 0b       	sbc	r27, r21
}
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	60 96       	adiw	r28, 0x10	; 16
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	08 95       	ret

00000cfa <DIO_SetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_prv.h"
#include "DIO_int.h"

void DIO_SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <DIO_SetPinDirection+0x6>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <DIO_SetPinDirection+0x8>
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	6a 83       	std	Y+2, r22	; 0x02
     d0c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	3d 83       	std	Y+5, r19	; 0x05
     d16:	2c 83       	std	Y+4, r18	; 0x04
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	9d 81       	ldd	r25, Y+5	; 0x05
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	91 05       	cpc	r25, r1
     d20:	09 f4       	brne	.+2      	; 0xd24 <DIO_SetPinDirection+0x2a>
     d22:	47 c0       	rjmp	.+142    	; 0xdb2 <DIO_SetPinDirection+0xb8>
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	2c f4       	brge	.+10     	; 0xd38 <DIO_SetPinDirection+0x3e>
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	71 f0       	breq	.+28     	; 0xd52 <DIO_SetPinDirection+0x58>
     d36:	cb c0       	rjmp	.+406    	; 0xece <DIO_SetPinDirection+0x1d4>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <DIO_SetPinDirection+0x4a>
     d42:	67 c0       	rjmp	.+206    	; 0xe12 <DIO_SetPinDirection+0x118>
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	9d 81       	ldd	r25, Y+5	; 0x05
     d48:	83 30       	cpi	r24, 0x03	; 3
     d4a:	91 05       	cpc	r25, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <DIO_SetPinDirection+0x56>
     d4e:	91 c0       	rjmp	.+290    	; 0xe72 <DIO_SetPinDirection+0x178>
     d50:	be c0       	rjmp	.+380    	; 0xece <DIO_SetPinDirection+0x1d4>
	{
	case PORTA:
		if(Copy_u8Direction==Input)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 23       	and	r24, r24
     d56:	a9 f4       	brne	.+42     	; 0xd82 <DIO_SetPinDirection+0x88>
			CLR_BIT(DDRA,Copy_u8Pin);
     d58:	aa e3       	ldi	r26, 0x3A	; 58
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ea e3       	ldi	r30, 0x3A	; 58
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_SetPinDirection+0x7c>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_SetPinDirection+0x78>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	a6 c0       	rjmp	.+332    	; 0xece <DIO_SetPinDirection+0x1d4>
		else if(Copy_u8Direction==Output)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_SetPinDirection+0x90>
     d88:	a2 c0       	rjmp	.+324    	; 0xece <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRA,Copy_u8Pin);
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_SetPinDirection+0xae>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_SetPinDirection+0xaa>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	8e c0       	rjmp	.+284    	; 0xece <DIO_SetPinDirection+0x1d4>
		break;
	case PORTB:
		if(Copy_u8Direction==Input)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	a9 f4       	brne	.+42     	; 0xde2 <DIO_SetPinDirection+0xe8>
			CLR_BIT(DDRB,Copy_u8Pin);
     db8:	a7 e3       	ldi	r26, 0x37	; 55
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e7 e3       	ldi	r30, 0x37	; 55
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_SetPinDirection+0xdc>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_SetPinDirection+0xd8>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	76 c0       	rjmp	.+236    	; 0xece <DIO_SetPinDirection+0x1d4>
		else if(Copy_u8Direction==Output)
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	09 f0       	breq	.+2      	; 0xdea <DIO_SetPinDirection+0xf0>
     de8:	72 c0       	rjmp	.+228    	; 0xece <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRB,Copy_u8Pin);
     dea:	a7 e3       	ldi	r26, 0x37	; 55
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e7 e3       	ldi	r30, 0x37	; 55
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_SetPinDirection+0x10e>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_SetPinDirection+0x10a>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	5e c0       	rjmp	.+188    	; 0xece <DIO_SetPinDirection+0x1d4>
		break;
	case PORTC:
		if(Copy_u8Direction==Input)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 23       	and	r24, r24
     e16:	a9 f4       	brne	.+42     	; 0xe42 <DIO_SetPinDirection+0x148>
			CLR_BIT(DDRC,Copy_u8Pin);
     e18:	a4 e3       	ldi	r26, 0x34	; 52
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e4 e3       	ldi	r30, 0x34	; 52
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_SetPinDirection+0x13c>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_SetPinDirection+0x138>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	46 c0       	rjmp	.+140    	; 0xece <DIO_SetPinDirection+0x1d4>
		else if(Copy_u8Direction==Output)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO_SetPinDirection+0x150>
     e48:	42 c0       	rjmp	.+132    	; 0xece <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRC,Copy_u8Pin);
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_SetPinDirection+0x16e>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_SetPinDirection+0x16a>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	2e c0       	rjmp	.+92     	; 0xece <DIO_SetPinDirection+0x1d4>
		break;
	case PORTD:
		if(Copy_u8Direction==Input)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 23       	and	r24, r24
     e76:	a9 f4       	brne	.+42     	; 0xea2 <DIO_SetPinDirection+0x1a8>
			CLR_BIT(DDRD,Copy_u8Pin);
     e78:	a1 e3       	ldi	r26, 0x31	; 49
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e1 e3       	ldi	r30, 0x31	; 49
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_SetPinDirection+0x19c>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_SetPinDirection+0x198>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	16 c0       	rjmp	.+44     	; 0xece <DIO_SetPinDirection+0x1d4>
		else if(Copy_u8Direction==Output)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	99 f4       	brne	.+38     	; 0xece <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRD,Copy_u8Pin);
     ea8:	a1 e3       	ldi	r26, 0x31	; 49
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e1 e3       	ldi	r30, 0x31	; 49
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_SetPinDirection+0x1cc>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_SetPinDirection+0x1c8>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <DIO_SetPinValue>:


void DIO_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <DIO_SetPinValue+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <DIO_SetPinValue+0x8>
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	6a 83       	std	Y+2, r22	; 0x02
     ef0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3d 83       	std	Y+5, r19	; 0x05
     efa:	2c 83       	std	Y+4, r18	; 0x04
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_SetPinValue+0x2a>
     f06:	47 c0       	rjmp	.+142    	; 0xf96 <DIO_SetPinValue+0xb8>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	2c f4       	brge	.+10     	; 0xf1c <DIO_SetPinValue+0x3e>
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	71 f0       	breq	.+28     	; 0xf36 <DIO_SetPinValue+0x58>
     f1a:	cb c0       	rjmp	.+406    	; 0x10b2 <DIO_SetPinValue+0x1d4>
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <DIO_SetPinValue+0x4a>
     f26:	67 c0       	rjmp	.+206    	; 0xff6 <DIO_SetPinValue+0x118>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_SetPinValue+0x56>
     f32:	91 c0       	rjmp	.+290    	; 0x1056 <DIO_SetPinValue+0x178>
     f34:	be c0       	rjmp	.+380    	; 0x10b2 <DIO_SetPinValue+0x1d4>
		{
		case PORTA:
			if(Copy_u8Value==LOW)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 23       	and	r24, r24
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_SetPinValue+0x88>
				CLR_BIT(PORTA_Register,Copy_u8Pin);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_SetPinValue+0x7c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_SetPinValue+0x78>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	a6 c0       	rjmp	.+332    	; 0x10b2 <DIO_SetPinValue+0x1d4>
			else if(Copy_u8Value==HIGH)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <DIO_SetPinValue+0x90>
     f6c:	a2 c0       	rjmp	.+324    	; 0x10b2 <DIO_SetPinValue+0x1d4>
				SET_BIT(PORTA_Register,Copy_u8Pin);
     f6e:	ab e3       	ldi	r26, 0x3B	; 59
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_SetPinValue+0xae>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_SetPinValue+0xaa>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	8e c0       	rjmp	.+284    	; 0x10b2 <DIO_SetPinValue+0x1d4>
			break;
		case PORTB:
			if(Copy_u8Value==LOW)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 23       	and	r24, r24
     f9a:	a9 f4       	brne	.+42     	; 0xfc6 <DIO_SetPinValue+0xe8>
				CLR_BIT(PORTB_Register,Copy_u8Pin);
     f9c:	a8 e3       	ldi	r26, 0x38	; 56
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e3       	ldi	r30, 0x38	; 56
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_SetPinValue+0xdc>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_SetPinValue+0xd8>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	76 c0       	rjmp	.+236    	; 0x10b2 <DIO_SetPinValue+0x1d4>
			else if(Copy_u8Value==HIGH)
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <DIO_SetPinValue+0xf0>
     fcc:	72 c0       	rjmp	.+228    	; 0x10b2 <DIO_SetPinValue+0x1d4>
				SET_BIT(PORTB_Register,Copy_u8Pin);
     fce:	a8 e3       	ldi	r26, 0x38	; 56
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e8 e3       	ldi	r30, 0x38	; 56
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_SetPinValue+0x10e>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_SetPinValue+0x10a>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	5e c0       	rjmp	.+188    	; 0x10b2 <DIO_SetPinValue+0x1d4>
			break;
		case PORTC:
			if(Copy_u8Value==LOW)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 23       	and	r24, r24
     ffa:	a9 f4       	brne	.+42     	; 0x1026 <DIO_SetPinValue+0x148>
				CLR_BIT(PORTC_Register,Copy_u8Pin);
     ffc:	a5 e3       	ldi	r26, 0x35	; 53
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e3       	ldi	r30, 0x35	; 53
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_SetPinValue+0x13c>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_SetPinValue+0x138>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	46 c0       	rjmp	.+140    	; 0x10b2 <DIO_SetPinValue+0x1d4>
			else if(Copy_u8Value==HIGH)
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	09 f0       	breq	.+2      	; 0x102e <DIO_SetPinValue+0x150>
    102c:	42 c0       	rjmp	.+132    	; 0x10b2 <DIO_SetPinValue+0x1d4>
				SET_BIT(PORTC_Register,Copy_u8Pin);
    102e:	a5 e3       	ldi	r26, 0x35	; 53
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e3       	ldi	r30, 0x35	; 53
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_SetPinValue+0x16e>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_SetPinValue+0x16a>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	2e c0       	rjmp	.+92     	; 0x10b2 <DIO_SetPinValue+0x1d4>
			break;
		case PORTD:
			if(Copy_u8Value==LOW)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	88 23       	and	r24, r24
    105a:	a9 f4       	brne	.+42     	; 0x1086 <DIO_SetPinValue+0x1a8>
				CLR_BIT(PORTD_Register,Copy_u8Pin);
    105c:	a2 e3       	ldi	r26, 0x32	; 50
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_SetPinValue+0x19c>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_SetPinValue+0x198>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <DIO_SetPinValue+0x1d4>
			else if(Copy_u8Value==HIGH)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	99 f4       	brne	.+38     	; 0x10b2 <DIO_SetPinValue+0x1d4>
				SET_BIT(PORTD_Register,Copy_u8Pin);
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_SetPinValue+0x1cc>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_SetPinValue+0x1c8>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <DIO_GetPinValue+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <DIO_GetPinValue+0x8>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	8a 83       	std	Y+2, r24	; 0x02
    10d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Copy_u8LocalVariable;
	switch(Copy_u8Port)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	4c 81       	ldd	r20, Y+4	; 0x04
    10e0:	5d 81       	ldd	r21, Y+5	; 0x05
    10e2:	41 30       	cpi	r20, 0x01	; 1
    10e4:	51 05       	cpc	r21, r1
    10e6:	41 f1       	breq	.+80     	; 0x1138 <DIO_GetPinValue+0x76>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	34 f4       	brge	.+12     	; 0x10fe <DIO_GetPinValue+0x3c>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	21 15       	cp	r18, r1
    10f8:	31 05       	cpc	r19, r1
    10fa:	61 f0       	breq	.+24     	; 0x1114 <DIO_GetPinValue+0x52>
    10fc:	52 c0       	rjmp	.+164    	; 0x11a2 <DIO_GetPinValue+0xe0>
    10fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1100:	5d 81       	ldd	r21, Y+5	; 0x05
    1102:	42 30       	cpi	r20, 0x02	; 2
    1104:	51 05       	cpc	r21, r1
    1106:	51 f1       	breq	.+84     	; 0x115c <DIO_GetPinValue+0x9a>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	b9 f1       	breq	.+110    	; 0x1180 <DIO_GetPinValue+0xbe>
    1112:	47 c0       	rjmp	.+142    	; 0x11a2 <DIO_GetPinValue+0xe0>
			{
			case PORTA:
				Copy_u8LocalVariable = GET_BIT(PINA, Copy_u8Pin);
    1114:	e9 e3       	ldi	r30, 0x39	; 57
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a9 01       	movw	r20, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_GetPinValue+0x6a>
    1128:	55 95       	asr	r21
    112a:	47 95       	ror	r20
    112c:	8a 95       	dec	r24
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_GetPinValue+0x66>
    1130:	ca 01       	movw	r24, r20
    1132:	81 70       	andi	r24, 0x01	; 1
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	35 c0       	rjmp	.+106    	; 0x11a2 <DIO_GetPinValue+0xe0>
				break;
			case PORTB:
				Copy_u8LocalVariable = GET_BIT(PINB, Copy_u8Pin);
    1138:	e6 e3       	ldi	r30, 0x36	; 54
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_GetPinValue+0x8e>
    114c:	55 95       	asr	r21
    114e:	47 95       	ror	r20
    1150:	8a 95       	dec	r24
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_GetPinValue+0x8a>
    1154:	ca 01       	movw	r24, r20
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	23 c0       	rjmp	.+70     	; 0x11a2 <DIO_GetPinValue+0xe0>
				break;
			case PORTC:
				Copy_u8LocalVariable = GET_BIT(PINC, Copy_u8Pin);
    115c:	e3 e3       	ldi	r30, 0x33	; 51
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_GetPinValue+0xb2>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_GetPinValue+0xae>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	11 c0       	rjmp	.+34     	; 0x11a2 <DIO_GetPinValue+0xe0>
				break;
			case PORTD:
				Copy_u8LocalVariable = GET_BIT(PIND, Copy_u8Pin);
    1180:	e0 e3       	ldi	r30, 0x30	; 48
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_GetPinValue+0xd6>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_GetPinValue+0xd2>
    119c:	ca 01       	movw	r24, r20
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		return Copy_u8LocalVariable;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <DIO_GetPinValueByPtr>:


void DIO_GetPinValueByPtr(u8 Copy_u8Port, u8 Copy_u8Pin, u8 * Copy_u8ptr)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_GetPinValueByPtr+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_GetPinValueByPtr+0x8>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_GetPinValueByPtr+0xa>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02
    11c6:	5c 83       	std	Y+4, r21	; 0x04
    11c8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3e 83       	std	Y+6, r19	; 0x06
    11d2:	2d 83       	std	Y+5, r18	; 0x05
    11d4:	4d 81       	ldd	r20, Y+5	; 0x05
    11d6:	5e 81       	ldd	r21, Y+6	; 0x06
    11d8:	41 30       	cpi	r20, 0x01	; 1
    11da:	51 05       	cpc	r21, r1
    11dc:	59 f1       	breq	.+86     	; 0x1234 <DIO_GetPinValueByPtr+0x80>
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <DIO_GetPinValueByPtr+0x40>
    11e8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ea:	3e 81       	ldd	r19, Y+6	; 0x06
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	69 f0       	breq	.+26     	; 0x120c <DIO_GetPinValueByPtr+0x58>
    11f2:	5b c0       	rjmp	.+182    	; 0x12aa <DIO_GetPinValueByPtr+0xf6>
    11f4:	4d 81       	ldd	r20, Y+5	; 0x05
    11f6:	5e 81       	ldd	r21, Y+6	; 0x06
    11f8:	42 30       	cpi	r20, 0x02	; 2
    11fa:	51 05       	cpc	r21, r1
    11fc:	79 f1       	breq	.+94     	; 0x125c <DIO_GetPinValueByPtr+0xa8>
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <DIO_GetPinValueByPtr+0x56>
    1208:	3d c0       	rjmp	.+122    	; 0x1284 <DIO_GetPinValueByPtr+0xd0>
    120a:	4f c0       	rjmp	.+158    	; 0x12aa <DIO_GetPinValueByPtr+0xf6>
		{
		case PORTA:
			*Copy_u8ptr = GET_BIT(PINA, Copy_u8Pin);
    120c:	e9 e3       	ldi	r30, 0x39	; 57
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a9 01       	movw	r20, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_GetPinValueByPtr+0x70>
    1220:	55 95       	asr	r21
    1222:	47 95       	ror	r20
    1224:	8a 95       	dec	r24
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_GetPinValueByPtr+0x6c>
    1228:	ca 01       	movw	r24, r20
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	eb 81       	ldd	r30, Y+3	; 0x03
    122e:	fc 81       	ldd	r31, Y+4	; 0x04
    1230:	80 83       	st	Z, r24
    1232:	3b c0       	rjmp	.+118    	; 0x12aa <DIO_GetPinValueByPtr+0xf6>
			break;
		case PORTB:
			*Copy_u8ptr = GET_BIT(PINB, Copy_u8Pin);
    1234:	e6 e3       	ldi	r30, 0x36	; 54
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_GetPinValueByPtr+0x98>
    1248:	55 95       	asr	r21
    124a:	47 95       	ror	r20
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_GetPinValueByPtr+0x94>
    1250:	ca 01       	movw	r24, r20
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	eb 81       	ldd	r30, Y+3	; 0x03
    1256:	fc 81       	ldd	r31, Y+4	; 0x04
    1258:	80 83       	st	Z, r24
    125a:	27 c0       	rjmp	.+78     	; 0x12aa <DIO_GetPinValueByPtr+0xf6>
			break;
		case PORTC:
			*Copy_u8ptr = GET_BIT(PINC, Copy_u8Pin);
    125c:	e3 e3       	ldi	r30, 0x33	; 51
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_GetPinValueByPtr+0xc0>
    1270:	55 95       	asr	r21
    1272:	47 95       	ror	r20
    1274:	8a 95       	dec	r24
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_GetPinValueByPtr+0xbc>
    1278:	ca 01       	movw	r24, r20
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	eb 81       	ldd	r30, Y+3	; 0x03
    127e:	fc 81       	ldd	r31, Y+4	; 0x04
    1280:	80 83       	st	Z, r24
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <DIO_GetPinValueByPtr+0xf6>
			break;
		case PORTD:
			*Copy_u8ptr = GET_BIT(PIND, Copy_u8Pin);
    1284:	e0 e3       	ldi	r30, 0x30	; 48
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_GetPinValueByPtr+0xe8>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_GetPinValueByPtr+0xe4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	eb 81       	ldd	r30, Y+3	; 0x03
    12a6:	fc 81       	ldd	r31, Y+4	; 0x04
    12a8:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
}
    12aa:	26 96       	adiw	r28, 0x06	; 6
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_SetPortDirection+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <DIO_SetPortDirection+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3c 83       	std	Y+4, r19	; 0x04
    12d4:	2b 83       	std	Y+3, r18	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <DIO_SetPortDirection+0x58>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_SetPortDirection+0x38>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_SetPortDirection+0x4e>
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <DIO_SetPortDirection+0x74>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_SetPortDirection+0x62>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_SetPortDirection+0x6c>
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <DIO_SetPortDirection+0x74>
		{
		case PORTA:
			DDRA = Copy_u8Direction;
    130a:	ea e3       	ldi	r30, 0x3A	; 58
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <DIO_SetPortDirection+0x74>
			break;
		case PORTB:
			DDRB = Copy_u8Direction;
    1314:	e7 e3       	ldi	r30, 0x37	; 55
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <DIO_SetPortDirection+0x74>
			break;
		case PORTC:
			DDRC = Copy_u8Direction;
    131e:	e4 e3       	ldi	r30, 0x34	; 52
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <DIO_SetPortDirection+0x74>
			break;
		case PORTD:
			DDRD = Copy_u8Direction;
    1328:	e1 e3       	ldi	r30, 0x31	; 49
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_SetPortValue>:
void DIO_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_SetPortValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_SetPortValue+0x8>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	3c 83       	std	Y+4, r19	; 0x04
    1356:	2b 83       	std	Y+3, r18	; 0x03
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	91 05       	cpc	r25, r1
    1360:	d1 f0       	breq	.+52     	; 0x1396 <DIO_SetPortValue+0x58>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	2c f4       	brge	.+10     	; 0x1376 <DIO_SetPortValue+0x38>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 f0       	breq	.+24     	; 0x138c <DIO_SetPortValue+0x4e>
    1374:	1e c0       	rjmp	.+60     	; 0x13b2 <DIO_SetPortValue+0x74>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <DIO_SetPortValue+0x62>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <DIO_SetPortValue+0x6c>
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <DIO_SetPortValue+0x74>
		{
		case PORTA:
			PORTA_Register = Copy_u8Value;
    138c:	eb e3       	ldi	r30, 0x3B	; 59
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <DIO_SetPortValue+0x74>
			break;
		case PORTB:
			PORTB_Register = Copy_u8Value;
    1396:	e8 e3       	ldi	r30, 0x38	; 56
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <DIO_SetPortValue+0x74>
			break;
		case PORTC:
			PORTC_Register = Copy_u8Value;
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <DIO_SetPortValue+0x74>
			break;
		case PORTD:
			PORTD_Register = Copy_u8Value;
    13aa:	e2 e3       	ldi	r30, 0x32	; 50
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <EXTI_SetTriggerMode>:
void(*EXTI1_GlobalPtr)(void)=0;
void(*EXTI2_GlobalPtr)(void)=0;


void EXTI_SetTriggerMode(void)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
#if(EXTI0_mode==FallingEdge)
	SET_BIT(MCUCR_Register,ISC01);
	CLR_BIT(MCUCR_Register,ISC00);

#elif(EXTI0_mode==RisingEdge)
	SET_BIT(MCUCR_Register,ISC01);
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC00);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
#if(EXTI1_mode==FallingEdge)
	SET_BIT(MCUCR_Register,ISC11);
	CLR_BIT(MCUCR_Register,ISC10);

#elif(EXTI1_mode==RisingEdge)
	SET_BIT(MCUCR_Register,ISC11);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Register,ISC10);
    13f2:	a5 e5       	ldi	r26, 0x55	; 85
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e5       	ldi	r30, 0x55	; 85
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	84 60       	ori	r24, 0x04	; 4
    13fe:	8c 93       	st	X, r24

#if(EXTI2_mode==FallingEdge)
	CLR_BIT(MCUCSR_Register,ISC2);

#elif(EXTI2_mode==RisingEdge)
	SET_BIT(MCUCSR_Register,ISC2);
    1400:	a4 e5       	ldi	r26, 0x54	; 84
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e4 e5       	ldi	r30, 0x54	; 84
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8c 93       	st	X, r24

#endif

}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <EXTI0_ChangeTriggerMode>:

void EXTI0_ChangeTriggerMode(u8 Copy_u8Mode)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <EXTI0_ChangeTriggerMode+0x6>
    141a:	0f 92       	push	r0
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Mode)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3b 83       	std	Y+3, r19	; 0x03
    142a:	2a 83       	std	Y+2, r18	; 0x02
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	21 f1       	breq	.+72     	; 0x147e <EXTI0_ChangeTriggerMode+0x6a>
    1436:	2a 81       	ldd	r18, Y+2	; 0x02
    1438:	3b 81       	ldd	r19, Y+3	; 0x03
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <EXTI0_ChangeTriggerMode+0x36>
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <EXTI0_ChangeTriggerMode+0x4c>
    1448:	46 c0       	rjmp	.+140    	; 0x14d6 <EXTI0_ChangeTriggerMode+0xc2>
    144a:	2a 81       	ldd	r18, Y+2	; 0x02
    144c:	3b 81       	ldd	r19, Y+3	; 0x03
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	21 f1       	breq	.+72     	; 0x149c <EXTI0_ChangeTriggerMode+0x88>
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	71 f1       	breq	.+92     	; 0x14ba <EXTI0_ChangeTriggerMode+0xa6>
    145e:	3b c0       	rjmp	.+118    	; 0x14d6 <EXTI0_ChangeTriggerMode+0xc2>
	{
		case FallingEdge:
			SET_BIT(MCUCR_Register,ISC01);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register,ISC00);
    146e:	a5 e5       	ldi	r26, 0x55	; 85
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e5       	ldi	r30, 0x55	; 85
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	8c 93       	st	X, r24
    147c:	2c c0       	rjmp	.+88     	; 0x14d6 <EXTI0_ChangeTriggerMode+0xc2>
			break;
		case RisingEdge:
			SET_BIT(MCUCR_Register,ISC01);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	82 60       	ori	r24, 0x02	; 2
    148a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_Register,ISC00);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	81 60       	ori	r24, 0x01	; 1
    1498:	8c 93       	st	X, r24
    149a:	1d c0       	rjmp	.+58     	; 0x14d6 <EXTI0_ChangeTriggerMode+0xc2>
			break;
		case OnChange:
			SET_BIT(MCUCR_Register,ISC00);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register,ISC01);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
    14b8:	0e c0       	rjmp	.+28     	; 0x14d6 <EXTI0_ChangeTriggerMode+0xc2>
			break;
		case LowLevel:
			CLR_BIT(MCUCR_Register,ISC00);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8e 7f       	andi	r24, 0xFE	; 254
    14c6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_Register,ISC01);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8d 7f       	andi	r24, 0xFD	; 253
    14d4:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <EXTI_Enable>:


void EXTI_Enable(u8 Copy_u8IntNumber)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <EXTI_Enable+0x6>
    14e8:	0f 92       	push	r0
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8IntNumber) {
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3b 83       	std	Y+3, r19	; 0x03
    14f8:	2a 83       	std	Y+2, r18	; 0x02
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	89 f0       	breq	.+34     	; 0x1526 <EXTI_Enable+0x44>
    1504:	2a 81       	ldd	r18, Y+2	; 0x02
    1506:	3b 81       	ldd	r19, Y+3	; 0x03
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	a1 f0       	breq	.+40     	; 0x1536 <EXTI_Enable+0x54>
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	9b 81       	ldd	r25, Y+3	; 0x03
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	b9 f4       	brne	.+46     	; 0x1544 <EXTI_Enable+0x62>
	case EXTI0:
		SET_BIT(GICR_Register,INT0);
    1516:	ab e5       	ldi	r26, 0x5B	; 91
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e5       	ldi	r30, 0x5B	; 91
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 64       	ori	r24, 0x40	; 64
    1522:	8c 93       	st	X, r24
    1524:	0f c0       	rjmp	.+30     	; 0x1544 <EXTI_Enable+0x62>
		break;
	case EXTI1:
		SET_BIT(GICR_Register,INT1);
    1526:	ab e5       	ldi	r26, 0x5B	; 91
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	eb e5       	ldi	r30, 0x5B	; 91
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	8c 93       	st	X, r24
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <EXTI_Enable+0x62>
		break;
	case EXTI2:
		SET_BIT(GICR_Register,INT2);
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <EXTI_Disable>:
void EXTI_Disable(u8 Copy_u8IntNumber)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <EXTI_Disable+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8IntNumber) {
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3b 83       	std	Y+3, r19	; 0x03
    1566:	2a 83       	std	Y+2, r18	; 0x02
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	89 f0       	breq	.+34     	; 0x1594 <EXTI_Disable+0x44>
    1572:	2a 81       	ldd	r18, Y+2	; 0x02
    1574:	3b 81       	ldd	r19, Y+3	; 0x03
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	a1 f0       	breq	.+40     	; 0x15a4 <EXTI_Disable+0x54>
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	b9 f4       	brne	.+46     	; 0x15b2 <EXTI_Disable+0x62>
	case EXTI0:
		CLR_BIT(GICR_Register,INT0);
    1584:	ab e5       	ldi	r26, 0x5B	; 91
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	eb e5       	ldi	r30, 0x5B	; 91
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 7b       	andi	r24, 0xBF	; 191
    1590:	8c 93       	st	X, r24
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <EXTI_Disable+0x62>
		break;
	case EXTI1:
		CLR_BIT(GICR_Register,INT1);
    1594:	ab e5       	ldi	r26, 0x5B	; 91
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e5       	ldi	r30, 0x5B	; 91
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 77       	andi	r24, 0x7F	; 127
    15a0:	8c 93       	st	X, r24
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <EXTI_Disable+0x62>
		break;
	case EXTI2:
		CLR_BIT(GICR_Register,INT2);
    15a4:	ab e5       	ldi	r26, 0x5B	; 91
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e5       	ldi	r30, 0x5B	; 91
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 7d       	andi	r24, 0xDF	; 223
    15b0:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <EXTI0_CallBackFunc>:


void EXTI0_CallBackFunc(void(*ptr)(void))
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <EXTI0_CallBackFunc+0x6>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_GlobalPtr=ptr;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	90 93 83 00 	sts	0x0083, r25
    15d4:	80 93 82 00 	sts	0x0082, r24
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <EXTI1_CallBackFunc>:
void EXTI1_CallBackFunc(void(*ptr)(void))
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <EXTI1_CallBackFunc+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_GlobalPtr=ptr;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	90 93 85 00 	sts	0x0085, r25
    15f8:	80 93 84 00 	sts	0x0084, r24

}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <EXTI2_CallBackFunc>:
void EXTI2_CallBackFunc(void(*ptr)(void))
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <EXTI2_CallBackFunc+0x6>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_GlobalPtr=ptr;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	90 93 87 00 	sts	0x0087, r25
    161c:	80 93 86 00 	sts	0x0086, r24
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <__vector_1>:

void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void)
{
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	EXTI0_GlobalPtr();
    1654:	e0 91 82 00 	lds	r30, 0x0082
    1658:	f0 91 83 00 	lds	r31, 0x0083
    165c:	09 95       	icall
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	EXTI1_GlobalPtr();
    16ae:	e0 91 84 00 	lds	r30, 0x0084
    16b2:	f0 91 85 00 	lds	r31, 0x0085
    16b6:	09 95       	icall
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <__vector_3>:

void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void)
{
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	EXTI2_GlobalPtr();
    1708:	e0 91 86 00 	lds	r30, 0x0086
    170c:	f0 91 87 00 	lds	r31, 0x0087
    1710:	09 95       	icall
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	bf 91       	pop	r27
    171c:	af 91       	pop	r26
    171e:	9f 91       	pop	r25
    1720:	8f 91       	pop	r24
    1722:	7f 91       	pop	r23
    1724:	6f 91       	pop	r22
    1726:	5f 91       	pop	r21
    1728:	4f 91       	pop	r20
    172a:	3f 91       	pop	r19
    172c:	2f 91       	pop	r18
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <GIE_Enable>:
#include "GIE_int.h"



void GIE_Enable(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_Register,I);
    1740:	af e5       	ldi	r26, 0x5F	; 95
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e5       	ldi	r30, 0x5F	; 95
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	8c 93       	st	X, r24
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <GIE_Disable>:
void GIE_Disable(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG_Register,I);
    175c:	af e5       	ldi	r26, 0x5F	; 95
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ef e5       	ldi	r30, 0x5F	; 95
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 77       	andi	r24, 0x7F	; 127
    1768:	8c 93       	st	X, r24
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <KPD_init>:
		{8,9,10,11},
		{12,13,14,15}
};

void KPD_init(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
    177a:	19 82       	std	Y+1, r1	; 0x01
	//4 pins input pull up rows
	for(i=Row_Start;i<=Row_End;i++)
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	0d c0       	rjmp	.+26     	; 0x179a <KPD_init+0x2a>
	{
		DIO_SetPinDirection(KPD_Port,i,Input);
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	69 81       	ldd	r22, Y+1	; 0x01
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
		DIO_SetPinValue(KPD_Port,i,HIGH);
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	69 81       	ldd	r22, Y+1	; 0x01
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>

void KPD_init(void)
{
	u8 i=0;
	//4 pins input pull up rows
	for(i=Row_Start;i<=Row_End;i++)
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	80 f3       	brcs	.-32     	; 0x1780 <KPD_init+0x10>
	{
		DIO_SetPinDirection(KPD_Port,i,Input);
		DIO_SetPinValue(KPD_Port,i,HIGH);
	}
	//4 pins output high columns
	for(i=Col_Start;i<=Col_End;i++)
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	0d c0       	rjmp	.+26     	; 0x17c0 <KPD_init+0x50>
	{
		DIO_SetPinDirection(KPD_Port,i,Output);
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	69 81       	ldd	r22, Y+1	; 0x01
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
		DIO_SetPinValue(KPD_Port,i,HIGH);
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	69 81       	ldd	r22, Y+1	; 0x01
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	{
		DIO_SetPinDirection(KPD_Port,i,Input);
		DIO_SetPinValue(KPD_Port,i,HIGH);
	}
	//4 pins output high columns
	for(i=Col_Start;i<=Col_End;i++)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	80 f3       	brcs	.-32     	; 0x17a6 <KPD_init+0x36>
	{
		DIO_SetPinDirection(KPD_Port,i,Output);
		DIO_SetPinValue(KPD_Port,i,HIGH);
	}
}
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <KPD_GetKey>:

u8 KPD_GetKey(void)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	63 97       	sbiw	r28, 0x13	; 19
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
	u8 value=0;
    17e2:	1b 8a       	std	Y+19, r1	; 0x13
	u8 key = 16; //if no button pressed
    17e4:	80 e1       	ldi	r24, 0x10	; 16
    17e6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 flag =0;
    17e8:	19 8a       	std	Y+17, r1	; 0x11
	//nested for loops -> micro notes
	for(u8 i=0; i<NoCols;i++)
    17ea:	18 8a       	std	Y+16, r1	; 0x10
    17ec:	ae c0       	rjmp	.+348    	; 0x194a <KPD_GetKey+0x17c>
	{
		DIO_SetPinValue(KPD_Port, Col_Start+i, LOW);
    17ee:	88 89       	ldd	r24, Y+16	; 0x10
    17f0:	98 2f       	mov	r25, r24
    17f2:	9c 5f       	subi	r25, 0xFC	; 252
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	69 2f       	mov	r22, r25
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
		for(u8 j=0; j<NoRows;j++)
    17fe:	1f 86       	std	Y+15, r1	; 0x0f
    1800:	92 c0       	rjmp	.+292    	; 0x1926 <KPD_GetKey+0x158>
		{
			value = DIO_GetPinValue(KPD_Port,Row_Start+j);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	6f 85       	ldd	r22, Y+15	; 0x0f
    1806:	0e 94 61 08 	call	0x10c2	; 0x10c2 <DIO_GetPinValue>
    180a:	8b 8b       	std	Y+19, r24	; 0x13
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 ea       	ldi	r26, 0xA0	; 160
    1812:	b1 e4       	ldi	r27, 0x41	; 65
    1814:	8b 87       	std	Y+11, r24	; 0x0b
    1816:	9c 87       	std	Y+12, r25	; 0x0c
    1818:	ad 87       	std	Y+13, r26	; 0x0d
    181a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	6b 85       	ldd	r22, Y+11	; 0x0b
    181e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1820:	8d 85       	ldd	r24, Y+13	; 0x0d
    1822:	9e 85       	ldd	r25, Y+14	; 0x0e
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8f 83       	std	Y+7, r24	; 0x07
    1836:	98 87       	std	Y+8, r25	; 0x08
    1838:	a9 87       	std	Y+9, r26	; 0x09
    183a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <KPD_GetKey+0x90>
		__ticks = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <KPD_GetKey+0x10e>
	else if (__tmp > 65535)
    185e:	6f 81       	ldd	r22, Y+7	; 0x07
    1860:	78 85       	ldd	r23, Y+8	; 0x08
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	9a 85       	ldd	r25, Y+10	; 0x0a
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <KPD_GetKey+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	6b 85       	ldd	r22, Y+11	; 0x0b
    1878:	7c 85       	ldd	r23, Y+12	; 0x0c
    187a:	8d 85       	ldd	r24, Y+13	; 0x0d
    187c:	9e 85       	ldd	r25, Y+14	; 0x0e
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	0f c0       	rjmp	.+30     	; 0x18be <KPD_GetKey+0xf0>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <KPD_GetKey+0xde>
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <KPD_GetKey+0xd2>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <KPD_GetKey+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <KPD_GetKey+0x11a>
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(value==0)
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	88 23       	and	r24, r24
    18f4:	a9 f4       	brne	.+42     	; 0x1920 <KPD_GetKey+0x152>
			{
				key = arr[j][i];
    18f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f8:	48 2f       	mov	r20, r24
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	88 89       	ldd	r24, Y+16	; 0x10
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	ca 01       	movw	r24, r20
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	fc 01       	movw	r30, r24
    1912:	e8 59       	subi	r30, 0x98	; 152
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	80 81       	ld	r24, Z
    1918:	8a 8b       	std	Y+18, r24	; 0x12
				flag = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 8b       	std	Y+17, r24	; 0x11
    191e:	07 c0       	rjmp	.+14     	; 0x192e <KPD_GetKey+0x160>
	u8 flag =0;
	//nested for loops -> micro notes
	for(u8 i=0; i<NoCols;i++)
	{
		DIO_SetPinValue(KPD_Port, Col_Start+i, LOW);
		for(u8 j=0; j<NoRows;j++)
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	8f 87       	std	Y+15, r24	; 0x0f
    1926:	8f 85       	ldd	r24, Y+15	; 0x0f
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f4       	brcc	.+2      	; 0x192e <KPD_GetKey+0x160>
    192c:	6a cf       	rjmp	.-300    	; 0x1802 <KPD_GetKey+0x34>
				key = arr[j][i];
				flag = 1;
				break;
			}
		}
		DIO_SetPinValue(KPD_Port, Col_Start+i, HIGH);
    192e:	88 89       	ldd	r24, Y+16	; 0x10
    1930:	98 2f       	mov	r25, r24
    1932:	9c 5f       	subi	r25, 0xFC	; 252
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	69 2f       	mov	r22, r25
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
		if(flag==1)
    193e:	89 89       	ldd	r24, Y+17	; 0x11
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	39 f0       	breq	.+14     	; 0x1952 <KPD_GetKey+0x184>
{
	u8 value=0;
	u8 key = 16; //if no button pressed
	u8 flag =0;
	//nested for loops -> micro notes
	for(u8 i=0; i<NoCols;i++)
    1944:	88 89       	ldd	r24, Y+16	; 0x10
    1946:	8f 5f       	subi	r24, 0xFF	; 255
    1948:	88 8b       	std	Y+16, r24	; 0x10
    194a:	88 89       	ldd	r24, Y+16	; 0x10
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	08 f4       	brcc	.+2      	; 0x1952 <KPD_GetKey+0x184>
    1950:	4e cf       	rjmp	.-356    	; 0x17ee <KPD_GetKey+0x20>
		if(flag==1)
		{
			break;
		}
	}
	return key;
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1954:	63 96       	adiw	r28, 0x13	; 19
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <LCD_init>:
#include "LCD_int.h"
#include "LCD_cfg.h"
#include "util/delay.h"

void LCD_init(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	e8 97       	sbiw	r28, 0x38	; 56
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
	//Port -> Out, Data, Command
	DIO_SetPortDirection(LCD_DataPort,PortOut);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	6f ef       	ldi	r22, 0xFF	; 255
    197e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SetPortDirection>
	//3 Pins -> out
	DIO_SetPinDirection(LCD_CtrlPort,RS_Pin,Output);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CtrlPort,RW_Pin,Output);
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CtrlPort,E_Pin,Output);
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	//ensure E is low
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,LOW);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 ef       	ldi	r26, 0xF0	; 240
    19b0:	b1 e4       	ldi	r27, 0x41	; 65
    19b2:	8d ab       	std	Y+53, r24	; 0x35
    19b4:	9e ab       	std	Y+54, r25	; 0x36
    19b6:	af ab       	std	Y+55, r26	; 0x37
    19b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6d a9       	ldd	r22, Y+53	; 0x35
    19bc:	7e a9       	ldd	r23, Y+54	; 0x36
    19be:	8f a9       	ldd	r24, Y+55	; 0x37
    19c0:	98 ad       	ldd	r25, Y+56	; 0x38
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	89 ab       	std	Y+49, r24	; 0x31
    19d4:	9a ab       	std	Y+50, r25	; 0x32
    19d6:	ab ab       	std	Y+51, r26	; 0x33
    19d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19da:	69 a9       	ldd	r22, Y+49	; 0x31
    19dc:	7a a9       	ldd	r23, Y+50	; 0x32
    19de:	8b a9       	ldd	r24, Y+51	; 0x33
    19e0:	9c a9       	ldd	r25, Y+52	; 0x34
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <LCD_init+0x96>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	98 ab       	std	Y+48, r25	; 0x30
    19f8:	8f a7       	std	Y+47, r24	; 0x2f
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <LCD_init+0x114>
	else if (__tmp > 65535)
    19fc:	69 a9       	ldd	r22, Y+49	; 0x31
    19fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1a00:	8b a9       	ldd	r24, Y+51	; 0x33
    1a02:	9c a9       	ldd	r25, Y+52	; 0x34
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <LCD_init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6d a9       	ldd	r22, Y+53	; 0x35
    1a16:	7e a9       	ldd	r23, Y+54	; 0x36
    1a18:	8f a9       	ldd	r24, Y+55	; 0x37
    1a1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	98 ab       	std	Y+48, r25	; 0x30
    1a3a:	8f a7       	std	Y+47, r24	; 0x2f
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_init+0xf6>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9e a7       	std	Y+46, r25	; 0x2e
    1a44:	8d a7       	std	Y+45, r24	; 0x2d
    1a46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_init+0xe4>
    1a4e:	9e a7       	std	Y+46, r25	; 0x2e
    1a50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a54:	98 a9       	ldd	r25, Y+48	; 0x30
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	98 ab       	std	Y+48, r25	; 0x30
    1a5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_init+0xd8>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <LCD_init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	69 a9       	ldd	r22, Y+49	; 0x31
    1a68:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	98 ab       	std	Y+48, r25	; 0x30
    1a78:	8f a7       	std	Y+47, r24	; 0x2f
    1a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7e:	9c a7       	std	Y+44, r25	; 0x2c
    1a80:	8b a7       	std	Y+43, r24	; 0x2b
    1a82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_init+0x120>
    1a8a:	9c a7       	std	Y+44, r25	; 0x2c
    1a8c:	8b a7       	std	Y+43, r24	; 0x2b
	//init -> datasheet
	_delay_ms(30);
	LCD_WriteCommand(lcd_FunctionSet8bit);
    1a8e:	88 e3       	ldi	r24, 0x38	; 56
    1a90:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_WriteCommand>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 ea       	ldi	r26, 0xA0	; 160
    1a9a:	b0 e4       	ldi	r27, 0x40	; 64
    1a9c:	8f a3       	std	Y+39, r24	; 0x27
    1a9e:	98 a7       	std	Y+40, r25	; 0x28
    1aa0:	a9 a7       	std	Y+41, r26	; 0x29
    1aa2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    1aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8b a3       	std	Y+35, r24	; 0x23
    1abe:	9c a3       	std	Y+36, r25	; 0x24
    1ac0:	ad a3       	std	Y+37, r26	; 0x25
    1ac2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aca:	9e a1       	ldd	r25, Y+38	; 0x26
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <LCD_init+0x180>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9a a3       	std	Y+34, r25	; 0x22
    1ae2:	89 a3       	std	Y+33, r24	; 0x21
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <LCD_init+0x1fe>
	else if (__tmp > 65535)
    1ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aea:	8d a1       	ldd	r24, Y+37	; 0x25
    1aec:	9e a1       	ldd	r25, Y+38	; 0x26
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <LCD_init+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6f a1       	ldd	r22, Y+39	; 0x27
    1b00:	78 a5       	ldd	r23, Y+40	; 0x28
    1b02:	89 a5       	ldd	r24, Y+41	; 0x29
    1b04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9a a3       	std	Y+34, r25	; 0x22
    1b24:	89 a3       	std	Y+33, r24	; 0x21
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <LCD_init+0x1e0>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	98 a3       	std	Y+32, r25	; 0x20
    1b2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b32:	98 a1       	ldd	r25, Y+32	; 0x20
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_init+0x1ce>
    1b38:	98 a3       	std	Y+32, r25	; 0x20
    1b3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9a a3       	std	Y+34, r25	; 0x22
    1b44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	89 a1       	ldd	r24, Y+33	; 0x21
    1b48:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <LCD_init+0x1c2>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <LCD_init+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6b a1       	ldd	r22, Y+35	; 0x23
    1b52:	7c a1       	ldd	r23, Y+36	; 0x24
    1b54:	8d a1       	ldd	r24, Y+37	; 0x25
    1b56:	9e a1       	ldd	r25, Y+38	; 0x26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9a a3       	std	Y+34, r25	; 0x22
    1b62:	89 a3       	std	Y+33, r24	; 0x21
    1b64:	89 a1       	ldd	r24, Y+33	; 0x21
    1b66:	9a a1       	ldd	r25, Y+34	; 0x22
    1b68:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_init+0x20a>
    1b74:	9e 8f       	std	Y+30, r25	; 0x1e
    1b76:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_WriteCommand(lcd_DisplayOn);
    1b78:	8c e0       	ldi	r24, 0x0C	; 12
    1b7a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_WriteCommand>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 ea       	ldi	r26, 0xA0	; 160
    1b84:	b0 e4       	ldi	r27, 0x40	; 64
    1b86:	89 8f       	std	Y+25, r24	; 0x19
    1b88:	9a 8f       	std	Y+26, r25	; 0x1a
    1b8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8d 8b       	std	Y+21, r24	; 0x15
    1ba8:	9e 8b       	std	Y+22, r25	; 0x16
    1baa:	af 8b       	std	Y+23, r26	; 0x17
    1bac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bae:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_init+0x26a>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 8b       	std	Y+20, r25	; 0x14
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_init+0x2e8>
	else if (__tmp > 65535)
    1bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_init+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_init+0x2ca>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9a 8b       	std	Y+18, r25	; 0x12
    1c18:	89 8b       	std	Y+17, r24	; 0x11
    1c1a:	89 89       	ldd	r24, Y+17	; 0x11
    1c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_init+0x2b8>
    1c22:	9a 8b       	std	Y+18, r25	; 0x12
    1c24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_init+0x2ac>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c40:	98 8d       	ldd	r25, Y+24	; 0x18
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c50:	9c 89       	ldd	r25, Y+20	; 0x14
    1c52:	98 8b       	std	Y+16, r25	; 0x10
    1c54:	8f 87       	std	Y+15, r24	; 0x0f
    1c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c58:	98 89       	ldd	r25, Y+16	; 0x10
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_init+0x2f4>
    1c5e:	98 8b       	std	Y+16, r25	; 0x10
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_WriteCommand(lcd_Clear);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_WriteCommand>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6e:	b0 e4       	ldi	r27, 0x40	; 64
    1c70:	8b 87       	std	Y+11, r24	; 0x0b
    1c72:	9c 87       	std	Y+12, r25	; 0x0c
    1c74:	ad 87       	std	Y+13, r26	; 0x0d
    1c76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8f 83       	std	Y+7, r24	; 0x07
    1c92:	98 87       	std	Y+8, r25	; 0x08
    1c94:	a9 87       	std	Y+9, r26	; 0x09
    1c96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_init+0x354>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_init+0x3d2>
	else if (__tmp > 65535)
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_init+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_init+0x3b4>
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_init+0x3a2>
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_init+0x396>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_init+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_init+0x3de>
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	LCD_WriteCommand(lcd_EntryMode);
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_WriteCommand>
}
    1d52:	e8 96       	adiw	r28, 0x38	; 56
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Copy_u8Command)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 0 COMMAND
	DIO_SetPinValue(LCD_CtrlPort,RS_Pin,LOW);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//RW -> 0 WRITE
	DIO_SetPinValue(LCD_CtrlPort,RW_Pin,LOW);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//E -> 0 ENSURE
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,LOW);
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//Write Command
	DIO_SetPortValue(LCD_DataPort,Copy_u8Command);
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d9c:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_SetPortValue>
	//GIVE PULSE
	//E -> 1
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,HIGH);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 ea       	ldi	r26, 0xA0	; 160
    1db0:	b0 e4       	ldi	r27, 0x40	; 64
    1db2:	8b 87       	std	Y+11, r24	; 0x0b
    1db4:	9c 87       	std	Y+12, r25	; 0x0c
    1db6:	ad 87       	std	Y+13, r26	; 0x0d
    1db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8f 83       	std	Y+7, r24	; 0x07
    1dd4:	98 87       	std	Y+8, r25	; 0x08
    1dd6:	a9 87       	std	Y+9, r26	; 0x09
    1dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_WriteCommand+0x98>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_WriteCommand+0x116>
	else if (__tmp > 65535)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_WriteCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_WriteCommand+0xf8>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_WriteCommand+0xe6>
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_WriteCommand+0xda>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_WriteCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_WriteCommand+0x122>
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	//Delay
	_delay_ms(5);
	//E -> 0
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,LOW);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
}
    1e98:	2f 96       	adiw	r28, 0x0f	; 15
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_WriteChar>:

void LCD_WriteChar(u8 Copy_u8Char)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	2f 97       	sbiw	r28, 0x0f	; 15
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 1 DATA
	DIO_SetPinValue(LCD_CtrlPort,RS_Pin,HIGH);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	62 e0       	ldi	r22, 0x02	; 2
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//RW -> 0 WRITE
	DIO_SetPinValue(LCD_CtrlPort,RW_Pin,LOW);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//E -> 0 ENSURE
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,LOW);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
	//Write Command
	DIO_SetPortValue(LCD_DataPort,Copy_u8Char);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ee2:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_SetPortValue>
	//GIVE PULSE
	//E -> 1
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,HIGH);
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ef6:	b0 e4       	ldi	r27, 0x40	; 64
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	9c 87       	std	Y+12, r25	; 0x0c
    1efc:	ad 87       	std	Y+13, r26	; 0x0d
    1efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8f 83       	std	Y+7, r24	; 0x07
    1f1a:	98 87       	std	Y+8, r25	; 0x08
    1f1c:	a9 87       	std	Y+9, r26	; 0x09
    1f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_WriteChar+0x98>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_WriteChar+0x116>
	else if (__tmp > 65535)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_WriteChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_WriteChar+0xf8>
    1f84:	88 ec       	ldi	r24, 0xC8	; 200
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_WriteChar+0xe6>
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_WriteChar+0xda>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <LCD_WriteChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_WriteChar+0x122>
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	//Delay
	_delay_ms(5);
	//E -> 0
	DIO_SetPinValue(LCD_CtrlPort,E_Pin,LOW);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
}
    1fde:	2f 96       	adiw	r28, 0x0f	; 15
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <LCD_WriteString>:

void LCD_WriteString(const u8 * Copy_u8Ptr)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <LCD_WriteString+0x6>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <LCD_WriteString+0x30>
	while(Copy_u8Ptr[i]!='\0')
	{
		LCD_WriteChar(Copy_u8Ptr[i]);
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	fc 01       	movw	r30, r24
    2010:	e2 0f       	add	r30, r18
    2012:	f3 1f       	adc	r31, r19
    2014:	80 81       	ld	r24, Z
    2016:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_WriteChar>
		i++;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_WriteString(const u8 * Copy_u8Ptr)
{
	u8 i = 0;
	while(Copy_u8Ptr[i]!='\0')
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	9b 81       	ldd	r25, Y+3	; 0x03
    202a:	fc 01       	movw	r30, r24
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	80 81       	ld	r24, Z
    2032:	88 23       	and	r24, r24
    2034:	39 f7       	brne	.-50     	; 0x2004 <LCD_WriteString+0x14>
	{
		LCD_WriteChar(Copy_u8Ptr[i]);
		i++;
	}
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_GoTo>:

void LCD_GoTo(u8 Copy_u8Line, u8 Copy_u8Column)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_GoTo+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_GoTo+0x8>
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	6b 83       	std	Y+3, r22	; 0x03
	u8 Copy_u8LocalVariable;
	if(Copy_u8Column>=0 && Copy_u8Column<=15)
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	80 31       	cpi	r24, 0x10	; 16
    2058:	b0 f4       	brcc	.+44     	; 0x2086 <LCD_GoTo+0x44>
	{
		switch (Copy_u8Line) {
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	3d 83       	std	Y+5, r19	; 0x05
    2062:	2c 83       	std	Y+4, r18	; 0x04
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	9d 81       	ldd	r25, Y+5	; 0x05
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	31 f0       	breq	.+12     	; 0x2078 <LCD_GoTo+0x36>
    206c:	2c 81       	ldd	r18, Y+4	; 0x04
    206e:	3d 81       	ldd	r19, Y+5	; 0x05
    2070:	21 30       	cpi	r18, 0x01	; 1
    2072:	31 05       	cpc	r19, r1
    2074:	29 f0       	breq	.+10     	; 0x2080 <LCD_GoTo+0x3e>
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <LCD_GoTo+0x44>
			case line_1:
				Copy_u8LocalVariable=128+Copy_u8Column;
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	80 58       	subi	r24, 0x80	; 128
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <LCD_GoTo+0x44>
				break;
			case line_2:
				Copy_u8LocalVariable=192+Copy_u8Column;
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	80 54       	subi	r24, 0x40	; 64
    2084:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:
				break;
		}
	}
	LCD_WriteCommand(Copy_u8LocalVariable);
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_WriteCommand>
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <SPI_MasterInit>:
#include "BIT_MATH.h"
#include "SPI_prv.h"
#include "SPI_int.h"

void SPI_MasterInit(void)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
	//select master
	SET_BIT(SPCR_Register,MSTR);
    20a4:	ad e2       	ldi	r26, 0x2D	; 45
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ed e2       	ldi	r30, 0x2D	; 45
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 61       	ori	r24, 0x10	; 16
    20b0:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPCR_Register,SPE);
    20b2:	ad e2       	ldi	r26, 0x2D	; 45
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ed e2       	ldi	r30, 0x2D	; 45
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 64       	ori	r24, 0x40	; 64
    20be:	8c 93       	st	X, r24
}
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	//select slave
	CLR_BIT(SPCR_Register,MSTR);
    20ce:	ad e2       	ldi	r26, 0x2D	; 45
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ed e2       	ldi	r30, 0x2D	; 45
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8f 7e       	andi	r24, 0xEF	; 239
    20da:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPCR_Register,SPE);
    20dc:	ad e2       	ldi	r26, 0x2D	; 45
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ed e2       	ldi	r30, 0x2D	; 45
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 64       	ori	r24, 0x40	; 64
    20e8:	8c 93       	st	X, r24
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <SPI_Tranceive>:

u8 SPI_Tranceive(u8 Copy_u8Data)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	89 83       	std	Y+1, r24	; 0x01
	SPDR_Register=Copy_u8Data;
    20fc:	ef e2       	ldi	r30, 0x2F	; 47
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_Register,SPIF)==0);
    2104:	ee e2       	ldi	r30, 0x2E	; 46
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	88 23       	and	r24, r24
    210c:	dc f7       	brge	.-10     	; 0x2104 <SPI_Tranceive+0x14>
	return SPDR_Register;
    210e:	ef e2       	ldi	r30, 0x2F	; 47
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
}
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <SEG7_init>:
                       0b01111111,   /* 8 */
                       0b01101111    /* 9 */
					  };

void SEG7_init(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
#if(ComType==ComAnode)
	//Pin->Output, Pin->High
	DIO_SetPinDirection(Seg7_ComPort, Seg7_ComPin,Output);
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	DIO_SetPinValue(Seg7_ComPort, Seg7_ComPin, HIGH);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
#elif(ComType==ComCathode)
	//Pin->Output, Pin->Low
	DIO_SetPinDirection(Seg7_ComPort, Seg7_ComPin,Output);
	DIO_SetPinValue(Seg7_ComPort, Seg7_ComPin, LOW);
#endif
DIO_SetPortDirection(Seg7_DisplayPort,PortOut);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	6f ef       	ldi	r22, 0xFF	; 255
    213c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_SetPortDirection>
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <SEG7_DisplayNumber>:

void SEG7_DisplayNumber(u8 Copy_u8Number)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	89 83       	std	Y+1, r24	; 0x01
#if(ComType==ComAnode)
	DIO_SetPortValue(Seg7_DisplayPort,~Arr[Copy_u8Number]);
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	fc 01       	movw	r30, r24
    215a:	e8 58       	subi	r30, 0x88	; 136
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	98 2f       	mov	r25, r24
    2162:	90 95       	com	r25
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	69 2f       	mov	r22, r25
    2168:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_SetPortValue>
#elif(ComType==ComCathode)
	DIO_SetPortValue(Seg7_DisplayPort,Arr[Copy_u8Number]);
#endif

}
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <TIM0_OFinit>:

void (*TIM0_OVF_GlobalPtr)(void)=0;
void (*TIM1_CTC_GlobalPtr)(void)=0;

void TIM0_OFinit(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	//Normal Mode
	CLR_BIT(TCCR0,WGM00);
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8f 7b       	andi	r24, 0xBF	; 191
    2188:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
    218a:	a3 e5       	ldi	r26, 0x53	; 83
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e3 e5       	ldi	r30, 0x53	; 83
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	87 7f       	andi	r24, 0xF7	; 247
    2196:	8c 93       	st	X, r24

	//prescalar = 8
	CLR_BIT(TCCR0,CS00);
    2198:	a3 e5       	ldi	r26, 0x53	; 83
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e3 e5       	ldi	r30, 0x53	; 83
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8e 7f       	andi	r24, 0xFE	; 254
    21a4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    21a6:	a3 e5       	ldi	r26, 0x53	; 83
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e3 e5       	ldi	r30, 0x53	; 83
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	82 60       	ori	r24, 0x02	; 2
    21b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    21b4:	a3 e5       	ldi	r26, 0x53	; 83
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e3 e5       	ldi	r30, 0x53	; 83
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8b 7f       	andi	r24, 0xFB	; 251
    21c0:	8c 93       	st	X, r24
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <TIM0_CTCinit>:

void TIM0_CTCinit(void)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	//CTC Mode
	CLR_BIT(TCCR0,WGM00);
    21d0:	a3 e5       	ldi	r26, 0x53	; 83
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e3 e5       	ldi	r30, 0x53	; 83
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8f 7b       	andi	r24, 0xBF	; 191
    21dc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    21de:	a3 e5       	ldi	r26, 0x53	; 83
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e3 e5       	ldi	r30, 0x53	; 83
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	88 60       	ori	r24, 0x08	; 8
    21ea:	8c 93       	st	X, r24

	//prescalar = 8
	CLR_BIT(TCCR0,CS00);
    21ec:	a3 e5       	ldi	r26, 0x53	; 83
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e3 e5       	ldi	r30, 0x53	; 83
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8e 7f       	andi	r24, 0xFE	; 254
    21f8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    21fa:	a3 e5       	ldi	r26, 0x53	; 83
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e5       	ldi	r30, 0x53	; 83
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	82 60       	ori	r24, 0x02	; 2
    2206:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    2208:	a3 e5       	ldi	r26, 0x53	; 83
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e3 e5       	ldi	r30, 0x53	; 83
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8b 7f       	andi	r24, 0xFB	; 251
    2214:	8c 93       	st	X, r24

	//OC0 (B3) --> toggle
	SET_BIT(TCCR0,COM00);
    2216:	a3 e5       	ldi	r26, 0x53	; 83
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	80 61       	ori	r24, 0x10	; 16
    2222:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM01);
    2224:	a3 e5       	ldi	r26, 0x53	; 83
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e3 e5       	ldi	r30, 0x53	; 83
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8f 7d       	andi	r24, 0xDF	; 223
    2230:	8c 93       	st	X, r24
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <TIM0_PWMinit>:


void TIM0_PWMinit(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
	//FAST PWM Mode
	SET_BIT(TCCR0,WGM00);
    2240:	a3 e5       	ldi	r26, 0x53	; 83
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e3 e5       	ldi	r30, 0x53	; 83
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 64       	ori	r24, 0x40	; 64
    224c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    224e:	a3 e5       	ldi	r26, 0x53	; 83
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e3 e5       	ldi	r30, 0x53	; 83
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	88 60       	ori	r24, 0x08	; 8
    225a:	8c 93       	st	X, r24

	//prescalar = 8
	CLR_BIT(TCCR0,CS00);
    225c:	a3 e5       	ldi	r26, 0x53	; 83
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e3 e5       	ldi	r30, 0x53	; 83
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8e 7f       	andi	r24, 0xFE	; 254
    2268:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    226a:	a3 e5       	ldi	r26, 0x53	; 83
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e3 e5       	ldi	r30, 0x53	; 83
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	82 60       	ori	r24, 0x02	; 2
    2276:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    2278:	a3 e5       	ldi	r26, 0x53	; 83
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e3 e5       	ldi	r30, 0x53	; 83
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8b 7f       	andi	r24, 0xFB	; 251
    2284:	8c 93       	st	X, r24

	//OC0 (B3) --> toggle
	CLR_BIT(TCCR0,COM00);
    2286:	a3 e5       	ldi	r26, 0x53	; 83
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e3 e5       	ldi	r30, 0x53	; 83
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 7e       	andi	r24, 0xEF	; 239
    2292:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    2294:	a3 e5       	ldi	r26, 0x53	; 83
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e3 e5       	ldi	r30, 0x53	; 83
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 62       	ori	r24, 0x20	; 32
    22a0:	8c 93       	st	X, r24
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <TIM0_OFInterruptEnable>:

void TIM0_OFInterruptEnable(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    22b0:	a9 e5       	ldi	r26, 0x59	; 89
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e9 e5       	ldi	r30, 0x59	; 89
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	8c 93       	st	X, r24
}
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <TIM0_OFSetRegValue>:

void TIM0_OFSetRegValue(u8 Copy_u8PreLoadValue)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8PreLoadValue;
    22d0:	e2 e5       	ldi	r30, 0x52	; 82
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	80 83       	st	Z, r24
}
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <TIM0_CTCSetRegValue>:

void TIM0_CTCSetRegValue(u8 Copy_u8CompareMatchValue)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareMatchValue;
    22ec:	ec e5       	ldi	r30, 0x5C	; 92
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	80 83       	st	Z, r24
}
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <TIM0_OFCallBack>:

void TIM0_OFCallBack(void(*ptr)(void))
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <TIM0_OFCallBack+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	TIM0_OVF_GlobalPtr=ptr;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	90 93 89 00 	sts	0x0089, r25
    2312:	80 93 88 00 	sts	0x0088, r24
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <__vector_11>:

void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void)
{
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	TIM0_OVF_GlobalPtr();
    234a:	e0 91 88 00 	lds	r30, 0x0088
    234e:	f0 91 89 00 	lds	r31, 0x0089
    2352:	09 95       	icall
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	ff 91       	pop	r31
    235a:	ef 91       	pop	r30
    235c:	bf 91       	pop	r27
    235e:	af 91       	pop	r26
    2360:	9f 91       	pop	r25
    2362:	8f 91       	pop	r24
    2364:	7f 91       	pop	r23
    2366:	6f 91       	pop	r22
    2368:	5f 91       	pop	r21
    236a:	4f 91       	pop	r20
    236c:	3f 91       	pop	r19
    236e:	2f 91       	pop	r18
    2370:	0f 90       	pop	r0
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	0f 90       	pop	r0
    2376:	1f 90       	pop	r1
    2378:	18 95       	reti

0000237a <TIM1_init>:


/*****************************************************************/

void TIM1_init(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	//OC1A --> clear on compare
	SET_BIT(TTCR1A,COM1A1);
    2382:	af e4       	ldi	r26, 0x4F	; 79
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ef e4       	ldi	r30, 0x4F	; 79
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 68       	ori	r24, 0x80	; 128
    238e:	8c 93       	st	X, r24
	CLR_BIT(TTCR1A,COM1A0);
    2390:	af e4       	ldi	r26, 0x4F	; 79
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	ef e4       	ldi	r30, 0x4F	; 79
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7b       	andi	r24, 0xBF	; 191
    239c:	8c 93       	st	X, r24

	//Mode 14 selection
	CLR_BIT(TTCR1A,WGM10);
    239e:	af e4       	ldi	r26, 0x4F	; 79
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	ef e4       	ldi	r30, 0x4F	; 79
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	8e 7f       	andi	r24, 0xFE	; 254
    23aa:	8c 93       	st	X, r24
	SET_BIT(TTCR1A,WGM11);
    23ac:	af e4       	ldi	r26, 0x4F	; 79
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ef e4       	ldi	r30, 0x4F	; 79
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	82 60       	ori	r24, 0x02	; 2
    23b8:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,WGM12);
    23ba:	ae e4       	ldi	r26, 0x4E	; 78
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ee e4       	ldi	r30, 0x4E	; 78
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	88 60       	ori	r24, 0x08	; 8
    23c6:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,WGM13);
    23c8:	ae e4       	ldi	r26, 0x4E	; 78
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ee e4       	ldi	r30, 0x4E	; 78
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 61       	ori	r24, 0x10	; 16
    23d4:	8c 93       	st	X, r24

	//prescaler = 8
	CLR_BIT(TTCR1B,CS10);
    23d6:	ae e4       	ldi	r26, 0x4E	; 78
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ee e4       	ldi	r30, 0x4E	; 78
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8e 7f       	andi	r24, 0xFE	; 254
    23e2:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,CS11);
    23e4:	ae e4       	ldi	r26, 0x4E	; 78
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ee e4       	ldi	r30, 0x4E	; 78
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	82 60       	ori	r24, 0x02	; 2
    23f0:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,CS12);
    23f2:	ae e4       	ldi	r26, 0x4E	; 78
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	ee e4       	ldi	r30, 0x4E	; 78
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8b 7f       	andi	r24, 0xFB	; 251
    23fe:	8c 93       	st	X, r24
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <TIM1_initServoPWM>:


// Initialize Timer1 in Fast PWM mode for servo control
void TIM1_initServoPWM(void)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    // Set Fast PWM mode with ICR1 as TOP (Mode 14)
    CLR_BIT(TTCR1A, WGM10);
    240e:	af e4       	ldi	r26, 0x4F	; 79
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	ef e4       	ldi	r30, 0x4F	; 79
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8e 7f       	andi	r24, 0xFE	; 254
    241a:	8c 93       	st	X, r24
    SET_BIT(TTCR1A, WGM11);
    241c:	af e4       	ldi	r26, 0x4F	; 79
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ef e4       	ldi	r30, 0x4F	; 79
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	82 60       	ori	r24, 0x02	; 2
    2428:	8c 93       	st	X, r24
    SET_BIT(TTCR1B, WGM12);
    242a:	ae e4       	ldi	r26, 0x4E	; 78
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ee e4       	ldi	r30, 0x4E	; 78
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	88 60       	ori	r24, 0x08	; 8
    2436:	8c 93       	st	X, r24
    SET_BIT(TTCR1B, WGM13);
    2438:	ae e4       	ldi	r26, 0x4E	; 78
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	ee e4       	ldi	r30, 0x4E	; 78
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 61       	ori	r24, 0x10	; 16
    2444:	8c 93       	st	X, r24

    // Set non-inverting mode on OC1A (Clear OC1A on Compare Match)
    SET_BIT(TTCR1A, COM1A1);
    2446:	af e4       	ldi	r26, 0x4F	; 79
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	ef e4       	ldi	r30, 0x4F	; 79
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	80 68       	ori	r24, 0x80	; 128
    2452:	8c 93       	st	X, r24
    CLR_BIT(TTCR1A, COM1A0);
    2454:	af e4       	ldi	r26, 0x4F	; 79
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ef e4       	ldi	r30, 0x4F	; 79
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8f 7b       	andi	r24, 0xBF	; 191
    2460:	8c 93       	st	X, r24

    // Set prescaler to 64
    SET_BIT(TTCR1B, CS10);
    2462:	ae e4       	ldi	r26, 0x4E	; 78
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ee e4       	ldi	r30, 0x4E	; 78
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	8c 93       	st	X, r24
    SET_BIT(TTCR1B, CS11);
    2470:	ae e4       	ldi	r26, 0x4E	; 78
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ee e4       	ldi	r30, 0x4E	; 78
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	82 60       	ori	r24, 0x02	; 2
    247c:	8c 93       	st	X, r24
    CLR_BIT(TTCR1B, CS12);
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	8b 7f       	andi	r24, 0xFB	; 251
    248a:	8c 93       	st	X, r24

    // Set TOP value for 20 ms period (50 Hz PWM frequency)
    ICR1 = 4999;
    248c:	e6 e4       	ldi	r30, 0x46	; 70
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	87 e8       	ldi	r24, 0x87	; 135
    2492:	93 e1       	ldi	r25, 0x13	; 19
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24

    // Set initial Compare Match value for 1 ms pulse width (0 degrees)
    OCR1A = 249;
    2498:	ea e4       	ldi	r30, 0x4A	; 74
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	89 ef       	ldi	r24, 0xF9	; 249
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TIM1_initNormal>:

void TIM1_initNormal(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62

	//Mode 0 selection
	CLR_BIT(TTCR1A,WGM10);
    24b2:	af e4       	ldi	r26, 0x4F	; 79
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ef e4       	ldi	r30, 0x4F	; 79
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8e 7f       	andi	r24, 0xFE	; 254
    24be:	8c 93       	st	X, r24
	CLR_BIT(TTCR1A,WGM11);
    24c0:	af e4       	ldi	r26, 0x4F	; 79
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ef e4       	ldi	r30, 0x4F	; 79
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8d 7f       	andi	r24, 0xFD	; 253
    24cc:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,WGM12);
    24ce:	ae e4       	ldi	r26, 0x4E	; 78
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	ee e4       	ldi	r30, 0x4E	; 78
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	87 7f       	andi	r24, 0xF7	; 247
    24da:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,WGM13);
    24dc:	ae e4       	ldi	r26, 0x4E	; 78
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ee e4       	ldi	r30, 0x4E	; 78
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 7e       	andi	r24, 0xEF	; 239
    24e8:	8c 93       	st	X, r24

	//prescaler = 8
	CLR_BIT(TTCR1B,CS10);
    24ea:	ae e4       	ldi	r26, 0x4E	; 78
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ee e4       	ldi	r30, 0x4E	; 78
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,CS11);
    24f8:	ae e4       	ldi	r26, 0x4E	; 78
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ee e4       	ldi	r30, 0x4E	; 78
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	82 60       	ori	r24, 0x02	; 2
    2504:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,CS12);
    2506:	ae e4       	ldi	r26, 0x4E	; 78
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ee e4       	ldi	r30, 0x4E	; 78
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8b 7f       	andi	r24, 0xFB	; 251
    2512:	8c 93       	st	X, r24
}
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <TIM1_initCTC>:

void TIM1_initCTC(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	//Mode 4 selection
	CLR_BIT(TTCR1A,WGM10);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	8c 93       	st	X, r24
	CLR_BIT(TTCR1A,WGM11);
    2530:	af e4       	ldi	r26, 0x4F	; 79
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ef e4       	ldi	r30, 0x4F	; 79
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8d 7f       	andi	r24, 0xFD	; 253
    253c:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,WGM12);
    253e:	ae e4       	ldi	r26, 0x4E	; 78
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	ee e4       	ldi	r30, 0x4E	; 78
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 60       	ori	r24, 0x08	; 8
    254a:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,WGM13);
    254c:	ae e4       	ldi	r26, 0x4E	; 78
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ee e4       	ldi	r30, 0x4E	; 78
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	8c 93       	st	X, r24

	//prescaler = 8
	CLR_BIT(TTCR1B,CS10);
    255a:	ae e4       	ldi	r26, 0x4E	; 78
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	ee e4       	ldi	r30, 0x4E	; 78
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8e 7f       	andi	r24, 0xFE	; 254
    2566:	8c 93       	st	X, r24
	SET_BIT(TTCR1B,CS11);
    2568:	ae e4       	ldi	r26, 0x4E	; 78
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ee e4       	ldi	r30, 0x4E	; 78
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	82 60       	ori	r24, 0x02	; 2
    2574:	8c 93       	st	X, r24
	CLR_BIT(TTCR1B,CS12);
    2576:	ae e4       	ldi	r26, 0x4E	; 78
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e4       	ldi	r30, 0x4E	; 78
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8b 7f       	andi	r24, 0xFB	; 251
    2582:	8c 93       	st	X, r24
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <TIM1_CTCInterruptEnable>:

void TIM1_CTCInterruptEnable(void)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    2592:	a9 e5       	ldi	r26, 0x59	; 89
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e9 e5       	ldi	r30, 0x59	; 89
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 61       	ori	r24, 0x10	; 16
    259e:	8c 93       	st	X, r24
}
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <TIM1_CTC_A_SetRegValue>:

void TIM1_CTC_A_SetRegValue(u16 Copy_u8CompareValue)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <TIM1_CTC_A_SetRegValue+0x6>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u8CompareValue;
    25b4:	ea e4       	ldi	r30, 0x4A	; 74
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <TIM1_CTC_A_GetRegValue>:

u16 TIM1_CTC_A_GetRegValue(void)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	return OCR1A;
    25d2:	ea e4       	ldi	r30, 0x4A	; 74
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <TIM1_ICRSetRegValue>:

void TIM1_ICRSetRegValue(u16 Copy_u8TopValue)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <TIM1_ICRSetRegValue+0x6>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u8TopValue;
    25ee:	e6 e4       	ldi	r30, 0x46	; 70
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <TIM1_TCNTSetRegValue>:

void TIM1_TCNTSetRegValue(u16 Copy_u8TValue)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <TIM1_TCNTSetRegValue+0x6>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u8TValue;
    2612:	ec e4       	ldi	r30, 0x4C	; 76
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <TIM1_TCNTGetRegValue>:

u16 TIM1_TCNTGetRegValue(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2630:	ec e4       	ldi	r30, 0x4C	; 76
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <TIM1_CTCCallBack>:

void TIM1_CTCCallBack(void(*ptr)(void))
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <TIM1_CTCCallBack+0x6>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_CTC_GlobalPtr=ptr;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 8b 00 	sts	0x008B, r25
    2654:	80 93 8a 00 	sts	0x008A, r24
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <__vector_7>:

void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_7 (void)
{
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	2f 93       	push	r18
    266e:	3f 93       	push	r19
    2670:	4f 93       	push	r20
    2672:	5f 93       	push	r21
    2674:	6f 93       	push	r22
    2676:	7f 93       	push	r23
    2678:	8f 93       	push	r24
    267a:	9f 93       	push	r25
    267c:	af 93       	push	r26
    267e:	bf 93       	push	r27
    2680:	ef 93       	push	r30
    2682:	ff 93       	push	r31
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	TIM1_CTC_GlobalPtr();
    268c:	e0 91 8a 00 	lds	r30, 0x008A
    2690:	f0 91 8b 00 	lds	r31, 0x008B
    2694:	09 95       	icall
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	0f 90       	pop	r0
    26b8:	1f 90       	pop	r1
    26ba:	18 95       	reti

000026bc <UART_init>:
#include "BIT_MATH.h"
#include "UART_prv.h"
#include "UART_int.h"

void UART_init(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62

	UCSRC_Register=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    26c4:	e0 e4       	ldi	r30, 0x40	; 64
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	86 e8       	ldi	r24, 0x86	; 134
    26ca:	80 83       	st	Z, r24
	CLR_BIT(UCSRB_Register,UCSZ2);
    26cc:	aa e2       	ldi	r26, 0x2A	; 42
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ea e2       	ldi	r30, 0x2A	; 42
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	8b 7f       	andi	r24, 0xFB	; 251
    26d8:	8c 93       	st	X, r24

	//Enable Receive & Transmit
	SET_BIT(UCSRB_Register,RXEN);
    26da:	aa e2       	ldi	r26, 0x2A	; 42
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	ea e2       	ldi	r30, 0x2A	; 42
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	80 61       	ori	r24, 0x10	; 16
    26e6:	8c 93       	st	X, r24
	SET_BIT(UCSRB_Register,TXEN);
    26e8:	aa e2       	ldi	r26, 0x2A	; 42
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	ea e2       	ldi	r30, 0x2A	; 42
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	88 60       	ori	r24, 0x08	; 8
    26f4:	8c 93       	st	X, r24

	//9600 BaudRate
	UBRRL_Register=51;
    26f6:	e9 e2       	ldi	r30, 0x29	; 41
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	83 e3       	ldi	r24, 0x33	; 51
    26fc:	80 83       	st	Z, r24
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <UART_transmit>:

void UART_transmit(u8 Copy_u8Data)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	0f 92       	push	r0
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA_Register,UDRE)==0);
    2710:	eb e2       	ldi	r30, 0x2B	; 43
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	82 95       	swap	r24
    2718:	86 95       	lsr	r24
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	81 70       	andi	r24, 0x01	; 1
    2722:	90 70       	andi	r25, 0x00	; 0
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 f3       	breq	.-24     	; 0x2710 <UART_transmit+0xc>
	UDR_Register=Copy_u8Data;
    2728:	ec e2       	ldi	r30, 0x2C	; 44
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	80 83       	st	Z, r24
}
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <UART_receive>:

u8 UART_receive(void)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA_Register,RXC)==0);
    2740:	eb e2       	ldi	r30, 0x2B	; 43
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	88 23       	and	r24, r24
    2748:	dc f7       	brge	.-10     	; 0x2740 <UART_receive+0x8>
	return UDR_Register;
    274a:	ec e2       	ldi	r30, 0x2C	; 44
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
}
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <WDG_TurnOn>:
#include "BIT_MATH.h"
#include "WDG_prv.h"
#include "WDG_int.h"

void WDG_TurnOn(void)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDE);
    275e:	a1 e4       	ldi	r26, 0x41	; 65
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e1 e4       	ldi	r30, 0x41	; 65
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	88 60       	ori	r24, 0x08	; 8
    276a:	8c 93       	st	X, r24
}
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <WDG_TurnOff>:

void WDG_TurnOff(void)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDTOE) | (1<<WDE);
    277a:	e1 e4       	ldi	r30, 0x41	; 65
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	88 e1       	ldi	r24, 0x18	; 24
    2780:	80 83       	st	Z, r24
	WDTCR = 0x00;
    2782:	e1 e4       	ldi	r30, 0x41	; 65
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	10 82       	st	Z, r1
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <WDG_Sleep>:

void WDG_Sleep(u8 Copy_u8Time)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	0f 92       	push	r0
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = (WDTCR&11111000)|Copy_u8Time;
    279a:	a1 e4       	ldi	r26, 0x41	; 65
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e1 e4       	ldi	r30, 0x41	; 65
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	98 2f       	mov	r25, r24
    27a6:	98 75       	andi	r25, 0x58	; 88
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	89 2b       	or	r24, r25
    27ac:	8c 93       	st	X, r24
}
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <WDG_Refresh>:
void WDG_Refresh(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	//WDR -> WDG Refresh
	asm("wdr");
    27be:	a8 95       	wdr
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <main>:
#include "UART_int.h"
#include "Timer_int.h"

//main slave -> Project1
void main(void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <main+0x6>
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	u16 x=0;
    27d0:	1a 82       	std	Y+2, r1	; 0x02
    27d2:	19 82       	std	Y+1, r1	; 0x01
	//pins

	//SS
	DIO_SetPinDirection(PORTB,PIN_4,Input);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	64 e0       	ldi	r22, 0x04	; 4
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	//MOSI
	DIO_SetPinDirection(PORTB,PIN_5,Input);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	65 e0       	ldi	r22, 0x05	; 5
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	//MISO
	DIO_SetPinDirection(PORTB,PIN_6,Output);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	66 e0       	ldi	r22, 0x06	; 6
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	//SCK
	DIO_SetPinDirection(PORTB,PIN_7,Input);
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	67 e0       	ldi	r22, 0x07	; 7
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>

	SPI_SlaveInit();
    27fc:	0e 94 63 10 	call	0x20c6	; 0x20c6 <SPI_SlaveInit>

	//DC Motor
	DIO_SetPinDirection(PORTC,PIN_0,Output);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPinDirection>
	DIO_SetPinValue(PORTC,PIN_0,LOW);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>

	while(1)
	{
		x=SPI_Tranceive(70);
    2814:	86 e4       	ldi	r24, 0x46	; 70
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 78 10 	call	0x20f0	; 0x20f0 <SPI_Tranceive>
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
		if(x >= 26)
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	8a 31       	cpi	r24, 0x1A	; 26
    2826:	91 05       	cpc	r25, r1
    2828:	30 f0       	brcs	.+12     	; 0x2836 <main+0x70>
		{
			DIO_SetPinValue(PORTC,PIN_0,HIGH);
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
    2834:	ef cf       	rjmp	.-34     	; 0x2814 <main+0x4e>
		}
		else
		{
			DIO_SetPinValue(PORTC,PIN_0,LOW);
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 6f 07 	call	0xede	; 0xede <DIO_SetPinValue>
    2840:	e9 cf       	rjmp	.-46     	; 0x2814 <main+0x4e>

00002842 <__mulsi3>:
    2842:	62 9f       	mul	r22, r18
    2844:	d0 01       	movw	r26, r0
    2846:	73 9f       	mul	r23, r19
    2848:	f0 01       	movw	r30, r0
    284a:	82 9f       	mul	r24, r18
    284c:	e0 0d       	add	r30, r0
    284e:	f1 1d       	adc	r31, r1
    2850:	64 9f       	mul	r22, r20
    2852:	e0 0d       	add	r30, r0
    2854:	f1 1d       	adc	r31, r1
    2856:	92 9f       	mul	r25, r18
    2858:	f0 0d       	add	r31, r0
    285a:	83 9f       	mul	r24, r19
    285c:	f0 0d       	add	r31, r0
    285e:	74 9f       	mul	r23, r20
    2860:	f0 0d       	add	r31, r0
    2862:	65 9f       	mul	r22, r21
    2864:	f0 0d       	add	r31, r0
    2866:	99 27       	eor	r25, r25
    2868:	72 9f       	mul	r23, r18
    286a:	b0 0d       	add	r27, r0
    286c:	e1 1d       	adc	r30, r1
    286e:	f9 1f       	adc	r31, r25
    2870:	63 9f       	mul	r22, r19
    2872:	b0 0d       	add	r27, r0
    2874:	e1 1d       	adc	r30, r1
    2876:	f9 1f       	adc	r31, r25
    2878:	bd 01       	movw	r22, r26
    287a:	cf 01       	movw	r24, r30
    287c:	11 24       	eor	r1, r1
    287e:	08 95       	ret

00002880 <__udivmodsi4>:
    2880:	a1 e2       	ldi	r26, 0x21	; 33
    2882:	1a 2e       	mov	r1, r26
    2884:	aa 1b       	sub	r26, r26
    2886:	bb 1b       	sub	r27, r27
    2888:	fd 01       	movw	r30, r26
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <__udivmodsi4_ep>

0000288c <__udivmodsi4_loop>:
    288c:	aa 1f       	adc	r26, r26
    288e:	bb 1f       	adc	r27, r27
    2890:	ee 1f       	adc	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	a2 17       	cp	r26, r18
    2896:	b3 07       	cpc	r27, r19
    2898:	e4 07       	cpc	r30, r20
    289a:	f5 07       	cpc	r31, r21
    289c:	20 f0       	brcs	.+8      	; 0x28a6 <__udivmodsi4_ep>
    289e:	a2 1b       	sub	r26, r18
    28a0:	b3 0b       	sbc	r27, r19
    28a2:	e4 0b       	sbc	r30, r20
    28a4:	f5 0b       	sbc	r31, r21

000028a6 <__udivmodsi4_ep>:
    28a6:	66 1f       	adc	r22, r22
    28a8:	77 1f       	adc	r23, r23
    28aa:	88 1f       	adc	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	1a 94       	dec	r1
    28b0:	69 f7       	brne	.-38     	; 0x288c <__udivmodsi4_loop>
    28b2:	60 95       	com	r22
    28b4:	70 95       	com	r23
    28b6:	80 95       	com	r24
    28b8:	90 95       	com	r25
    28ba:	9b 01       	movw	r18, r22
    28bc:	ac 01       	movw	r20, r24
    28be:	bd 01       	movw	r22, r26
    28c0:	cf 01       	movw	r24, r30
    28c2:	08 95       	ret

000028c4 <__prologue_saves__>:
    28c4:	2f 92       	push	r2
    28c6:	3f 92       	push	r3
    28c8:	4f 92       	push	r4
    28ca:	5f 92       	push	r5
    28cc:	6f 92       	push	r6
    28ce:	7f 92       	push	r7
    28d0:	8f 92       	push	r8
    28d2:	9f 92       	push	r9
    28d4:	af 92       	push	r10
    28d6:	bf 92       	push	r11
    28d8:	cf 92       	push	r12
    28da:	df 92       	push	r13
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	ca 1b       	sub	r28, r26
    28ee:	db 0b       	sbc	r29, r27
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	09 94       	ijmp

000028fc <__epilogue_restores__>:
    28fc:	2a 88       	ldd	r2, Y+18	; 0x12
    28fe:	39 88       	ldd	r3, Y+17	; 0x11
    2900:	48 88       	ldd	r4, Y+16	; 0x10
    2902:	5f 84       	ldd	r5, Y+15	; 0x0f
    2904:	6e 84       	ldd	r6, Y+14	; 0x0e
    2906:	7d 84       	ldd	r7, Y+13	; 0x0d
    2908:	8c 84       	ldd	r8, Y+12	; 0x0c
    290a:	9b 84       	ldd	r9, Y+11	; 0x0b
    290c:	aa 84       	ldd	r10, Y+10	; 0x0a
    290e:	b9 84       	ldd	r11, Y+9	; 0x09
    2910:	c8 84       	ldd	r12, Y+8	; 0x08
    2912:	df 80       	ldd	r13, Y+7	; 0x07
    2914:	ee 80       	ldd	r14, Y+6	; 0x06
    2916:	fd 80       	ldd	r15, Y+5	; 0x05
    2918:	0c 81       	ldd	r16, Y+4	; 0x04
    291a:	1b 81       	ldd	r17, Y+3	; 0x03
    291c:	aa 81       	ldd	r26, Y+2	; 0x02
    291e:	b9 81       	ldd	r27, Y+1	; 0x01
    2920:	ce 0f       	add	r28, r30
    2922:	d1 1d       	adc	r29, r1
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	ed 01       	movw	r28, r26
    2930:	08 95       	ret

00002932 <_exit>:
    2932:	f8 94       	cli

00002934 <__stop_program>:
    2934:	ff cf       	rjmp	.-2      	; 0x2934 <__stop_program>
